{"version":3,"sources":["logo.svg","Components/FirstPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FirstPage","props","handleChange","event","setState","villeCherchee","target","value","handleSubmit","componentDidMount","preventDefault","state","tempActuelle","undefined","tempMax","tempMin","humidite","pression","vent","code","ville","icon","fetch","this","then","response","json","d","main","temp","temp_max","temp_min","humidity","pressure","wind","speed","cod","name","weather","catch","error","Navbar","bg","variant","Brand","href","Nav","className","Form","inline","onSubmit","FormControl","type","placeholder","onChange","Button","Col","sm","Card","text","style","width","Header","src","Body","Title","Math","round","ListGroup","Item","Alert","Heading","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,qOCItBC,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAuCVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,cAAeF,EAAMG,OAAOC,SAzC5B,EA2CnBC,aAAe,SAACL,GACZ,EAAKM,oBACLN,EAAMO,kBA3CN,EAAKC,MAAQ,CACTN,cAAgB,cAChBO,kBAAeC,EACfC,aAAUD,EACVE,aAAUF,EACVG,cAAUH,EACVI,cAAUJ,EACVK,UAAOL,EACPM,UAAON,EACPO,WAAQP,EACRQ,UAAOR,GAZI,E,iFAgBE,IAAD,OAChBS,MAAM,oDAAD,OAAqDC,KAAKZ,MAAMN,cAAhE,4CAEAmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAC,OACH,EAAKvB,SAAS,CACVQ,aAAce,EAAEC,KAAKC,KACrBf,QAASa,EAAEC,KAAKE,SAChBf,QAASY,EAAEC,KAAKG,SAChBf,SAASW,EAAEC,KAAKI,SAChBf,SAASU,EAAEC,KAAKK,SAChBf,KAAKS,EAAEO,KAAKC,MACZhB,KAAKQ,EAAES,IACPhB,MAAOO,EAAEU,KACThB,KAAOM,EAAEW,QAAQ,GAAGjB,UAI3BkB,OAAM,SAAAC,GACH,EAAKpC,SAAS,CAAEe,KAAO,W,+BAY/B,OACI,6BACI,kBAACsB,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,2BACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,YAGf,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SAAU3B,KAAKf,cACxB,kBAAC2C,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,aAAaN,UAAU,UAAUxC,MAAOgB,KAAKZ,MAAMN,cAAeiD,SAAU/B,KAAKrB,eACtH,kBAACqD,EAAA,EAAD,CAAQZ,QAAQ,gBAAhB,gBAGa,MAApBpB,KAAKZ,MAAMQ,KACR,kBAACqC,EAAA,EAAD,CAAKC,IAAE,GACP,6BACI,kBAACC,EAAA,EAAD,CAAMhB,GAAG,OAAOK,UAAU,WAAWY,KAAK,QAAQC,MAAO,CAAEC,MAAO,UAC9D,kBAACH,EAAA,EAAKI,OAAN,SAAe,0BAAMf,UAAU,aAAaxB,KAAKZ,MAAMS,OAAvD,IAAqE,yBAAK2C,IAAG,2CAAsCxC,KAAKZ,MAAMU,KAAjD,aAA7E,KACA,kBAACqC,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKO,MAAN,kBAAuBC,KAAKC,MAAM5C,KAAKZ,MAAMC,aAAgB,QAA7D,UACA,kBAACwD,EAAA,EAAD,KACI,kBAACA,EAAA,EAAUC,KAAX,8BAAoCH,KAAKC,MAAM5C,KAAKZ,MAAMG,QAAU,QAApE,UACA,kBAACsD,EAAA,EAAUC,KAAX,8BAAoCH,KAAKC,MAAM5C,KAAKZ,MAAMI,QAAU,QAApE,UACA,kBAACqD,EAAA,EAAUC,KAAX,mBAA4B9C,KAAKZ,MAAMM,SAAvC,QACA,kBAACmD,EAAA,EAAUC,KAAX,eAAwB9C,KAAKZ,MAAMO,KAAnC,SACA,kBAACkD,EAAA,EAAUC,KAAX,sBAA4B9C,KAAKZ,MAAMK,SAAvC,WAQhB,kBAACsD,EAAA,EAAD,CAAO3B,QAAQ,UAAUI,UAAU,eAAea,MAAO,CAAEC,MAAO,UAC9D,kBAACS,EAAA,EAAMC,QAAP,6BACA,uGAGA,6BACA,uBAAGxB,UAAU,QAAb,yE,GAvFeyB,IAAMC,W,MCS9BC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCIc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,MAAK,SAAA+D,GACjCA,EAAaC,kB","file":"static/js/main.da091ab8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Alert, Button, Card, Col, Form, FormControl, ListGroup, Nav, Navbar} from \"react-bootstrap\";\r\n\r\n\r\nexport default class FirstPage extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            villeCherchee : 'Montpellier',\r\n            tempActuelle : undefined,\r\n            tempMax : undefined,\r\n            tempMin : undefined,\r\n            humidite: undefined,\r\n            pression: undefined,\r\n            vent : undefined,\r\n            code : undefined,\r\n            ville : undefined,\r\n            icon : undefined\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.villeCherchee}&appid=7610c1faf81edbeddc533ead6a530912`)\r\n            // We get the API response and receive data in JSON format...\r\n            .then(response => response.json())\r\n            // ...then we update the users state\r\n            .then(d =>\r\n                this.setState({\r\n                    tempActuelle: d.main.temp,\r\n                    tempMax: d.main.temp_max,\r\n                    tempMin: d.main.temp_min,\r\n                    humidite:d.main.humidity,\r\n                    pression:d.main.pressure,\r\n                    vent:d.wind.speed,\r\n                    code:d.cod,\r\n                    ville: d.name,\r\n                    icon : d.weather[0].icon\r\n                })\r\n            )\r\n            // Catch any errors we hit and update the app\r\n            .catch(error => {\r\n                this.setState({ code : 404 })\r\n            });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({villeCherchee: event.target.value});\r\n    };\r\n    handleSubmit = (event) => {\r\n        this.componentDidMount();\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"#home\">App Météo | React</Navbar.Brand>\r\n                    <Nav className=\"mr-auto\">\r\n                        {/*<Nav.Link href=\"#home\">Home</Nav.Link>*/}\r\n                    </Nav>\r\n                    <Form inline onSubmit={this.handleSubmit}>\r\n                        <FormControl type=\"text\" placeholder=\"Rechercher\" className=\"mr-sm-2\" value={this.state.villeCherchee} onChange={this.handleChange}/>\r\n                        <Button variant=\"outline-info\">Rechercher</Button>\r\n                    </Form>\r\n                </Navbar>\r\n                {this.state.code !== 404 ?\r\n                    <Col sm>\r\n                    <div>\r\n                        <Card bg=\"dark\" className=\"cardBody\" text=\"white\" style={{ width: '25rem' }}>\r\n                            <Card.Header > <span className=\"cardTitle\">{this.state.ville}</span> <img src={`http://openweathermap.org/img/wn/${this.state.icon}@2x.png`}/> </Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Title>il fait : {Math.round(this.state.tempActuelle  - 273.15)} °C</Card.Title>\r\n                                <ListGroup>\r\n                                    <ListGroup.Item>Température Max. : {Math.round(this.state.tempMax - 273.15)} °C</ListGroup.Item>\r\n                                    <ListGroup.Item>Température Min. : {Math.round(this.state.tempMin - 273.15)} °C</ListGroup.Item>\r\n                                    <ListGroup.Item>Pression : {this.state.pression} hPa</ListGroup.Item>\r\n                                    <ListGroup.Item>Vent : {this.state.vent} Km/H</ListGroup.Item>\r\n                                    <ListGroup.Item>Humidité : {this.state.humidite} %</ListGroup.Item>\r\n                                </ListGroup>\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n                </Col>\r\n                    :\r\n                    <Alert variant=\"warning\" className=\"warningAlert\" style={{ width: '25rem' }}>\r\n                        <Alert.Heading>Ville non trouvée</Alert.Heading>\r\n                        <p>\r\n                            Veuillez entrer un nom de ville valide. Par exemple : Paris, Londres ...\r\n                        </p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">\r\n                            Si le problème persiste veuillez contacter l'administrateur.\r\n                        </p>\r\n                    </Alert>\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FirstPage from \"./Components/FirstPage\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FirstPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}